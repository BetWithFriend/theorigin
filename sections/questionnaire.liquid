{{ 'questionnaire.css' | asset_url | stylesheet_tag }}

<div class="questionnaire-wrapper hidden" id="questionnaireWrapperDesktop">
    <div class="questionnaire-icons-wrapper active">
      <div class="questionnaire-title-wrapper">
          <img class="questionnaire-back-icon" src="{{ 'questionnaire_back_icon.png' |  asset_url }}" alt="Close icon" onclick="closeForm()"/>
          <div class="questionnaire-title">איך אתם מכינים את הקפה</div>
      </div>
      
        <div class="questionnaire-selection-wrapper"  data-filter-value="Espresso"> 
            <img class="questionnaire-img-icon" src="{{ 'questionnaire_Espresso_Machine.png' |  asset_url }}" alt="Espresso icon"/>
            <div class="questionnaire-text">מכונת אספרסו</div>
        </div>
        <div class="questionnaire-selection-wrapper"  data-filter-value="MokaPot">
            <img class="questionnaire-img-icon" src="{{ 'questionnaire_Moka_Pot.png' |  asset_url }}" alt="Moka pot icon"/>
            <div class="questionnaire-text">מקינטה</div>
        </div>
        <div class="questionnaire-selection-wrapper"  data-filter-value="Black">
            <img class="questionnaire-img-icon" src="{{ 'questionnaire_Turkish_Cezve.png' |  asset_url }}" alt="Turkish icon"/>
            <div class="questionnaire-text">קפה טורקי</div>
        </div>
        <div class="questionnaire-selection-wrapper"  data-filter-value="V60">
            <img class="questionnaire-img-icon" src="{{ 'questionnaire_v60.png' |  asset_url }}" alt="V60 icon"/>
            <div class="questionnaire-text">מזיגה ידנית</div>
        </div>
        <div class="questionnaire-selection-wrapper"  data-filter-value="Espresso">
            <img class="questionnaire-img-icon" src="{{ 'questionnaire_Auto_Machine.png' |  asset_url }}" alt="Espresso Auto icon"/>
            <div class="questionnaire-text">מכונה אוטומטית</div>
        </div>
        <div class="questionnaire-selection-wrapper" data-filter-value="Aeropress">
            <img class="questionnaire-img-icon" src="{{ 'questionnaire_Aeropress.png' |  asset_url }}" alt="Aeropress icon"/>
            <div class="questionnaire-text">אירופרס</div>
        </div>
        <button class="questionnaire-select-btn" onclick="getFilters('filter.p.m.custom.coffee_prep_methods', 1)" disabled>המשך עם 1 שיטה</button>
    </div>
    <div class="questionnaire-icons-wrapper ">
          <div class="questionnaire-title-wrapper">
              <img class="questionnaire-back-icon" src="{{ 'questionnaire_back_icon.png' |  asset_url }}" alt="Close icon" onclick="goToPreviousStep()"/>
              <div class="questionnaire-title">רמת קלייה - בהיר או כהה?</div>
          </div>
            <div class="questionnaire-selection-wrapper" data-filter-value="בהירה, בהירה-בינונית"> 
                <img class="questionnaire-img-icon" src="{{ 'questionnaire_light.png' |  asset_url }}" alt="light roast icon"/>
                <div class="questionnaire-text">בהירה</div>
                <div class="questionnaire-expl-text">טעמים פירותיים וקלילים</div>
            </div>
            <div class="questionnaire-selection-wrapper" data-filter-value="בהירה-בינונית, בינונית, בינונית-כהה">
                <img class="questionnaire-img-icon" src="{{ 'questionnaire_medium.png' |  asset_url }}" alt="medium roast icon"/>
                <div class="questionnaire-text">בינונית</div>
                <div class="questionnaire-expl-text">טעמים מתוקים יותר ומאוזנים</div>
            </div>
            <div class="questionnaire-selection-wrapper" data-filter-value="בינונית-כהה, כהה">
                <img class="questionnaire-img-icon" src="{{ 'questionnaire_dark.png' |  asset_url }}" alt="dark roast icon"/>
                <div class="questionnaire-text">כהה</div>
                <div class="questionnaire-expl-text">טעמים שוקולדיים וקצת מרירים</div>
            </div>
            <div class="questionnaire-selection-wrapper" data-filter-value="">
                <img class="questionnaire-img-icon" src="{{ 'questionnaire_dont_know.png' |  asset_url }}" alt="dont know icon"/>
                <div class="questionnaire-text">לא יודע</div>
                <div class="questionnaire-expl-text">מוכן לגלות מה מתאים לי</div>
            </div>
            <div class="questionnaire-selection-wrapper"></div>
            <div class="questionnaire-selection-wrapper"></div>
            <button class="questionnaire-select-btn" onclick="getFilters('filter.p.m.custom.coffee_roast_level', 2)">המשך עם 1 שיטה</button>
    </div>
    <div class="questionnaire-icons-wrapper ">
      <div class="questionnaire-title-wrapper">
          <img class="questionnaire-back-icon" src="{{ 'questionnaire_back_icon.png' |  asset_url }}" alt="Close icon"  onclick="goToPreviousStep()"/>
          <div class="questionnaire-title">איזה טעם אתה מחפש בקפה?</div>
      </div>
        <div class="questionnaire-selection-wrapper" data-filter-value="Fruity & Floral"> 
            <img class="questionnaire-img-icon" src="{{ 'questionnaire_Dark_2.png' |  asset_url }}" alt="dark coffee icon"/>
            <div class="questionnaire-text">פרחוני ופירותי</div>
            <div class="questionnaire-expl-text">קליל, מזכיר פירות הדר, תה מיוחד</div>
        </div>
        <div class="questionnaire-selection-wrapper" data-filter-value="Sweet & Caramelly">
            <img class="questionnaire-img-icon" src="{{ 'questionnaire_soft.png' |  asset_url }}" alt="soft coffee icon"/>
            <div class="questionnaire-text">מתקתק ומאוזן</div>
            <div class="questionnaire-expl-text">מתיקות טבעית, מזכיר קרמל, טופי</div>
        </div>
        <div class="questionnaire-selection-wrapper" data-filter-value="Rich & Chocolaty">
            <img class="questionnaire-img-icon" src="{{ 'questionnaire_special.png' |  asset_url }}" alt="Turkish icon"/>
            <div class="questionnaire-text">שוקולדי ועשיר</div>
            <div class="questionnaire-expl-text">טעם עמוק, מזכיר שוקולד מריר, אגוז</div>
        </div>
        {% comment %} <div class="questionnaire-selection-wrapper" data-filter-value="">
            <img class="questionnaire-img-icon" src="{{ 'questionnaire_milk.png' |  asset_url }}" alt="V60 icon"/>
            <div class="questionnaire-text">עם חלב</div>
            <div class="questionnaire-expl-text">קפוצ׳ינו, לאטה או הפוך</div>
        </div> {% endcomment %}
        <div class="questionnaire-selection-wrapper" data-filter-value="">
            <img class="questionnaire-img-icon" src="{{ 'questionnaire_dont_know_2.png' |  asset_url }}" alt="dont know icon"/>
            <div class="questionnaire-text">עדיין לא בטוח</div>
            <div class="questionnaire-expl-text">פתוח לגלות מה מתאים לי</div>
        </div>
        <div class="questionnaire-selection-wrapper"></div>
        <button class="questionnaire-select-btn" onclick="getFilters('filter.p.m.custom.coffee_tastes', 3)">המשך עם 1 שיטה</button>
    </div>
    <div class="questionnaire-icons-wrapper">
        <div class="questionnaire-loader-wrapper">
            <img class="questionnaire-loader-img" src="{{ 'questionnaire_loader.png'  |  asset_url}}" alt=""/>
            <div class="questionnaire-loader-text">מתאימים את פולי הקפה בדיוק בשבילך</div>
        </div>
    </div>
</div>
<div class="lets-be-friends-wrapper">
    <img class="lets-be-friends-img" src="{{ 'lets_be_friends.png' | asset_url }}" alt="Lets be friends"/>
    <div class="lets-be-friends-title">בואו נהיה חברים</div>
    <div class="lets-be-friends-text">השאירו מייל כדי לשמוע על קפה חדש, בתי קלייה. מעניינים, צורות הכנה ועוד.
בלי ספאם. מבטיחים.</div>
 {%- form 'customer', id: 'ContactFooter', class: 'footer__newsletter newsletter-form' -%}
                <input type="hidden" name="contact[tags]" value="newsletter">
                <div class="newsletter-form__field-wrapper">
                  <div class="field">
                    <input
                      id="NewsletterForm--{{ section.id }}"
                      type="email"
                      name="contact[email]"
                      class="field__input"
                      value="{{ form.email }}"
                      aria-required="true"
                      autocorrect="off"
                      autocapitalize="off"
                      autocomplete="email"
                      {% if form.errors %}
                        autofocus
                        aria-invalid="true"
                        aria-describedby="ContactFooter-error"
                      {% elsif form.posted_successfully? %}
                        aria-describedby="ContactFooter-success"
                      {% endif %}
                      placeholder="הכנס מייל"
                      required
                    >
                    <label class="field__label" for="NewsletterForm--{{ section.id }}">
                        הכנס מייל
                    </label>
                    {% comment %} <button
                      type="submit"
                      class="newsletter-form__button field__button"
                      name="commit"
                      id="Subscribe"
                      aria-label="{{ 'newsletter.button_label' | t }}"
                    >
                      <span class="svg-wrapper">
                        {{- 'icon-arrow.svg' | inline_asset_content -}}
                      </span>
                    </button> {% endcomment %}
                  </div>
                  {%- if form.errors -%}
                    <small class="newsletter-form__message form__message" id="ContactFooter-error">
                      <span class="svg-wrapper">
                        {{- 'icon-error.svg' | inline_asset_content -}}
                      </span>
                      {{- form.errors.translated_fields.email | capitalize }}
                      {{ form.errors.messages.email -}}
                    </small>
                  {%- endif -%}
                </div>
                {%- if form.posted_successfully? -%}
                  <h3
                    class="newsletter-form__message newsletter-form__message--success form__message"
                    id="ContactFooter-success"
                    tabindex="-1"
                    autofocus
                  >
                    <span class="svg-wrapper">
                      {{- 'icon-success.svg' | inline_asset_content -}}
                    </span>
                    {{- 'newsletter.success' | t }}
                  </h3>
                {%- endif -%}
              {%- endform -%}
    {% comment %} <input type="email" class="lets-be-friends-input" placeholder="הכנס מייל"/> {% endcomment %}
    <button onclick="sendForm()" class="questionnaire-select-btn form-submit">שלח</button>
    <div onclick="closeForm()" class="questionnaire-select-skip">דלג</div>
</div>

<script>

  function getSuitTasteProfile(selectedFilters) {

    if (!window.questionnaireData) return [];

    // Get all possible values if filter is empty or not selected
    const allPrepMethods = [...new Set(window.questionnaireData.map(row => row.prepMethod))];
    const allRoastLevels = [...new Set(window.questionnaireData.map(row => row.roastLevel))];

    const prepMethods = (window.appliedFilters['filter.p.m.custom.coffee_prep_methods'] && window.appliedFilters['filter.p.m.custom.coffee_prep_methods'].length)
      ? window.appliedFilters['filter.p.m.custom.coffee_prep_methods']
      : allPrepMethods;

    const roastLevels = (window.appliedFilters['filter.p.m.custom.coffee_roast_level'] && window.appliedFilters['filter.p.m.custom.coffee_roast_level'].length)
      ? window.appliedFilters['filter.p.m.custom.coffee_roast_level']
      : allRoastLevels;

    // Find all matching tasteProfiles
    const tasteProfiles = window.questionnaireData
      .filter(row =>
        prepMethods.includes(row.prepMethod) &&
        roastLevels.includes(row.roastLevel) &&
        (selectedFilters === '' || row.tasteProfile === selectedFilters)
      )
      .map(row => row.tastes);

    // Return unique taste profiles
    return [...new Set(tasteProfiles)];
  }

  function getFilters(filterName, stepIndex) {
    // Get all selected items in the current active step
    const activeWrapper = document.querySelector('.questionnaire-icons-wrapper.active');
    if (!activeWrapper) return;

    const selectedItems = activeWrapper.querySelectorAll('.questionnaire-selection-wrapper.selected');
    if (selectedItems.length === 0) return;

    // Get selected filter values
    let selectedValues = [];
    selectedItems.forEach(item => {
      const filterValue = item.getAttribute('data-filter-value');
      if (filterValue) {
        // Handle comma-separated values
        const values = filterValue.split(',').map(v => v.trim());
        selectedValues.push(...values);
      }
    });

    window.appliedFilters[filterName] = [];    
    if (selectedValues.length === 0) {
       goToNextStep(stepIndex);
    } else {   
        selectedValues.forEach(value => {
        // if (!window.appliedFilters[filterName])

          if (filterName === 'filter.p.m.custom.coffee_tastes') {
            const coffeeTastes = getSuitTasteProfile(value);
            coffeeTastes.forEach(tastes => {
              tastesArray = tastes.split(',').map(t => t.trim()); 
              tastesArray.forEach(taste => {
                if (!window.appliedFilters[filterName].includes(taste)) {
                  window.appliedFilters[filterName].push(taste);
                }
              });
            });
          } else {
              window.appliedFilters[filterName].push(value);
          }
          
      });
      goToNextStep(stepIndex);
    }
    // Update disabled state for taste options
    updateTasteOptionsDisabledState();
    console.log('boom:', window.appliedFilters);
  }

  function goToPreviousStep() {
    // Get the current active wrapper
    const currentActiveWrapper = document.querySelector('.questionnaire-icons-wrapper.active');
    
    if (!currentActiveWrapper) return;
    
    // Remove active class from current wrapper
    currentActiveWrapper.classList.remove('active');
    
    // Find the previous questionnaire-icons-wrapper
    const previousWrapper = currentActiveWrapper.previousElementSibling;
    
    // Add active class to previous wrapper if it exists and is a questionnaire-icons-wrapper
    if (previousWrapper && previousWrapper.classList.contains('questionnaire-icons-wrapper')) {
      previousWrapper.classList.add('active');

      // Update button state for the new active step
      updateSelectButton();

      // Update disabled state for taste options
      updateTasteOptionsDisabledState();
    }
  }

  function goToNextStep(stepIndex) {
    //   // Get the current active wrapper
    const currentActiveWrapper = document.querySelector('.questionnaire-icons-wrapper.active');
    
    if (!currentActiveWrapper) return;
    
    // Remove active class from current wrapper
    currentActiveWrapper.classList.remove('active');
    
    // Find the next questionnaire-icons-wrapper
    const nextWrapper = currentActiveWrapper.nextElementSibling;
    
    // Add active class to next wrapper if it exists and is a questionnaire-icons-wrapper
    if (nextWrapper && nextWrapper.classList.contains('questionnaire-icons-wrapper')) {
      nextWrapper.classList.add('active');
      updateSelectButton();
      // Disable the btn again for every iteration
      const selectBtn = nextWrapper.querySelector('.questionnaire-select-btn');
      if (selectBtn) {
        selectBtn.disabled = true;
        selectBtn.classList.add('disabled');
      }
      // Update disabled state for taste options
      updateTasteOptionsDisabledState();
    }

    if (stepIndex === 3) {
       //   // Show loader for 3 seconds if it is active on page load
      const loaderWrapper = document.querySelector('.questionnaire-icons-wrapper.active .questionnaire-loader-wrapper');
      if (loaderWrapper) {
        const questionnaireTitle = document.querySelector('.questionnaire-title');
        questionnaireTitle.classList.add('hidden');
        setTimeout(function() {
          const loaderIconsWrapper = loaderWrapper.closest('.questionnaire-icons-wrapper');
          if (loaderIconsWrapper) {
            loaderIconsWrapper.classList.remove('active');
            const mainWrapper = document.querySelector('.questionnaire-wrapper');
            // Hide main element
            if (mainWrapper) {
              mainWrapper.classList.add('hidden');
            }
            // Show the "lets be friends" section
            const friendsWrapper = document.querySelector('.lets-be-friends-wrapper');
            if (friendsWrapper) {
              friendsWrapper.classList.add('active');
            }
          }
        }, 3000);
      }
      const newQueryParams = arrayToQueryString(window.appliedFilters)
      if (window.FacetFiltersForm && typeof FacetFiltersForm.renderPage === 'function') {
         FacetFiltersForm.renderPage(newQueryParams, null, true);
      }
    }
  }

  function arrayToQueryString(filterData) {
    const params = new URLSearchParams();
    
    for (const key in filterData) {
      if (filterData.hasOwnProperty(key) && Array.isArray(filterData[key])) {
        const values = filterData[key];
        values.forEach(value => {
          params.append(key, value);
        });
      }
  }
  
    return params.toString();
}
  // // Keep your existing functions unchanged
  function updateSelectButton() {
    // Get the current active questionnaire step
    const activeWrapper = document.querySelector('.questionnaire-icons-wrapper.active');
    
    if (!activeWrapper) return;
    
    // Get all selected items in the current active step
    const selectedItems = activeWrapper.querySelectorAll('.questionnaire-selection-wrapper.selected');
    
    // Get the button in the current active step
    const selectBtn = activeWrapper.querySelector('.questionnaire-select-btn');
    
    if (selectBtn) {
      // Enable button if one or more items are selected, disable otherwise
      if (selectedItems.length > 0) {
          const hasEmptyFilterValue = Array.from(selectedItems).some(item => item.getAttribute('data-filter-value') === "");
          selectBtn.disabled = false;
          selectBtn.classList.remove('disabled');
          selectBtn.textContent = !hasEmptyFilterValue ? 
                `המשך עם ${selectedItems.length} ${selectedItems.length > 1 ? 'שיטות' : 'שיטה'}` : 
                `המשך`;
      } else {
        selectBtn.disabled = true;
        selectBtn.classList.add('disabled');
        selectBtn.textContent = 'המשך עם 1 שיטה';
      }
    }
  }

  function openForm() {
    const questionnaireWrapper = document.querySelector('.questionnaire-wrapper');
    document.body.classList.add('questionnaire-wrapper-open');
    questionnaireWrapper.classList.remove('hidden');
    // Show all questionnaire-icons-wrapper elements
    // const firstWrapper = document.querySelector('.questionnaire-icons-wrapper');
    // if (firstWrapper) {
    //   firstWrapper.classList.remove('hidden');
    // }
  }

  function closeForm() {
    const friendsWrapper = document.querySelector('.lets-be-friends-wrapper');
    const questionnaireWrapper = document.querySelector('.questionnaire-wrapper');
    if (friendsWrapper) {
      friendsWrapper.classList.remove('active');
      document.body.classList.remove('questionnaire-wrapper-open');
      questionnaireWrapper.classList.add('hidden');
    }
  }

  function sendForm() {
    const friendsWrapper = document.querySelector('.lets-be-friends-wrapper');
    const questionnaireWrapper = document.querySelector('.questionnaire-wrapper');
    if (friendsWrapper) {
      friendsWrapper.classList.remove('active');
      document.body.classList.remove('questionnaire-wrapper-open');
      questionnaireWrapper.classList.add('hidden');
    }
    // Submit the form
    document.getElementById('ContactFooter').submit();
  }

  // // Helper to load questionnaire data only once
  function loadQuestionnaireData() {
    if (window.questionnaireDataPromise) return window.questionnaireDataPromise;
    window.questionnaireDataPromise = fetch('/assets/questionnaire_data.json')
      .then(response => {
        if (!response.ok) throw new Error('Network response was not ok');
        return response.json();
      })
      .then(data => {
        window.questionnaireData = data;
        return data;
      })
      .catch(error => {
        console.error('Failed to load questionnaire_data.json:', error);
        window.questionnaireData = [];
        return [];
      });
    return window.questionnaireDataPromise;
  }

  // Add this function to handle disabling taste options if 'כהה' is selected
  function updateTasteOptionsDisabledState() {
    // Check if 'כהה' is in the roast level filter
    const roastLevels = window.appliedFilters && window.appliedFilters['filter.p.m.custom.coffee_roast_level'];
    const isDarkSelected = Array.isArray(roastLevels) && roastLevels.includes('כהה');

    // Select the relevant taste option wrappers (update selector if needed)
    const tasteWrappers = document.querySelectorAll('.questionnaire-icons-wrapper.active .questionnaire-selection-wrapper[data-filter-value="Fruity & Floral"], .questionnaire-icons-wrapper.active .questionnaire-selection-wrapper[data-filter-value="Sweet & Caramelly"]');

    tasteWrappers.forEach(wrapper => {
      if (isDarkSelected) {
        wrapper.classList.add('disabled');
      } else {
        wrapper.classList.remove('disabled');
      }
    });
  }

  // Initialize the questionnaire functionality
  document.addEventListener('DOMContentLoaded', function() {
    console.log('boom');
    if (window.location.search.includes('from=main-cta')) {
      openForm();
       document.body.classList.add('questionnaire-wrapper-open');
      //Object that will hold the filters data
      window.appliedFilters = [];

      // Usage example:
      loadQuestionnaireData().then(data => {
        // data is available here
        window.questionnaireData = data;
      });
      
      // Add click event listeners to all selection wrappers
      const selectionWrappers = document.querySelectorAll('.questionnaire-selection-wrapper');
      
      selectionWrappers.forEach(wrapper => {
        // Prevent click event for empty wrappers
        if (wrapper.innerHTML.trim() === '') return;
        wrapper.addEventListener('click', function(e) {
          // Prevent click if disabled
          if (this.classList.contains('disabled')) {
            e.stopPropagation();
            e.preventDefault();
            return;
          }
          // Only allow selection if this wrapper is in the active step
          const parentWrapper = this.closest('.questionnaire-icons-wrapper');
          if (!parentWrapper.classList.contains('active')) return;

          // 
          const filterValue = wrapper.getAttribute('data-filter-value');
          // Remove selection from all other wrappers in the same step
          if (!filterValue || filterValue.trim() === '') {
            if (this.classList.contains('selected')) {
              this.classList.remove('selected');
            } else {
            // Remove 'selected' class from all wrappers in the current step
              parentWrapper.querySelectorAll('.questionnaire-selection-wrapper.selected').forEach(el => {
                el.classList.remove('selected');
              });
              this.classList.add('selected');
            } 
          } else {
            if (parentWrapper.querySelector('.questionnaire-selection-wrapper[data-filter-value=""].selected')) {
              parentWrapper.querySelector('.questionnaire-selection-wrapper[data-filter-value=""].selected').classList.remove('selected');
            }   
              this.classList.toggle('selected');
            }
          
          // Update button state
          updateSelectButton();
        });
      });
      }
    });
    
</script>
