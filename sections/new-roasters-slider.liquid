{{ 'new-roasters-slider.css' | asset_url | stylesheet_tag }}
<div class="new-roasters-slider-wrapper">
    <div class="new-roasters-slider-title" dir="rtl">בתי קלייה חדשים</div>
    <div class="new-roasters-slider-subtitle">הסיפור מאחורי בתי הקלייה</div>
    <div class="new-rosters-slider-content-wrapper" dir="rtl">
     {% for vendor in shop.metaobjects.vendor_definitions.values %}
        <div class="new-roasters-slider-content-wrapper" dir="rtl">
            <div class="new-roastes-slider-top">
                <div class="new-roastes-slider-roaster-logo-wrapper">
                    <img class="new-roastes-slider-roaster-logo" src="{{ vendor.vendor_logo | img_url: 'small' }}" alt="">
                </div>
                <div class="new-roastes-slider-roaster-id">
                    <div class="new-roastes-slider-roaster-id-content">מיקום: {{vendor.vendor_location}}</div>
                    <div class="new-roastes-slider-roaster-id-content">הקמה: {{vendor.vendor_year_establishment}}</div>
                    <div class="new-roastes-slider-roaster-id-content hp-vendor-link" onclick="goToVendorPageHP('{{ vendor.vendor_name.value }}')">לבית הקליה</div>
                </div>
            </div>
            <div class="new-roastes-slider-roaster-video-wrapper">
                  <video controls class="new-roastes-slider-roaster-video" poster="{{ vendor.vendor_video_poster | file_url }}">
                    <source src="{{ vendor.vendor_video | file_url }}" type="video/mp4">
                  </video>
                {% comment %} <img class="new-roastes-slider-roaster-video" src="{{ vendor.vendor_video_poster | file_url }}" alt=""> {% endcomment %}
            </div>
            <div class="new-roastes-slider-roaster-description">            
            {%- if vendor.vendor_details != blank -%}
                <div class="rich-text">
                  {{ vendor.vendor_short_description.value }}
                  {% comment %} {%- for block in vendor.vendor_details.value.children -%}
                    {%- case block.type -%}
                      {%- when 'paragraph' -%}
                        <p class="rich-text__paragraph">
                          {%- for child in block.children -%}
                            {%- if child.type == 'text' -%}
                              {{- child.value | newline_to_br -}}
                            {%- endif -%}
                          {%- endfor -%}
                        </p>
                    {%- endcase -%}
                  {%- endfor -%} {% endcomment %}
                </div>
            {%- endif -%}
              </div>
        </div>
     {% endfor %} 
    </div>
    <div class="new-roasters-slider-action-wrapper">
      <img onclick="slideVendor('right')" class="new-roasters-slider-arrow" src="{{ 'arrow_vendor_right.png' |  asset_url }}"/>
        <div class="new-roasters-slider-bullets-wrapper">
            {% for vendor in shop.metaobjects.vendor_definitions.values %}
                <div class="new-roasters-slider-bullet"> </div>
            {% endfor %} 
        </div>
        <img onclick="slideVendor('left')" class="new-roasters-slider-arrow" src="{{ 'arrow_vendor_left.png' |  asset_url }}"/>
    </div>
</div>

<script>
  let currentIndex = 0;
  let slideDirection = 'right'; // Track slide direction
    const slides = document.querySelectorAll('.new-rosters-slider-content-wrapper > .new-roasters-slider-content-wrapper');
    const bullets = document.querySelectorAll('.new-roasters-slider-bullet');
    
    // Set initial state
    slides.forEach((slide, index) => {
      const isDesktop = window.innerWidth >= 768;
      slide.style.position = 'absolute';
      slide.style.top = '0';
      slide.style.left = '0';
      slide.style.width = '100%';
      
      if (index === 0) {
        slide.style.display = isDesktop ? 'grid' : 'flex';
        slide.style.opacity = '1';
        slide.style.transform = 'translateX(0)';
      } else {
        slide.style.display = 'none';
        slide.style.opacity = '0';
        slide.style.transform = slideDirection === 'right' ? 'translateX(-100%)' : 'translateX(100%)';
      }
    });
    updateBullets();
    
    // Add click handlers for left and right arrows directly
    const leftArrow = document.querySelector('.new-roasters-slider-arrow[src*="arrow_vendor_left"]');
    const rightArrow = document.querySelector('.new-roasters-slider-arrow[src*="arrow_vendor_right"]');
    
    if (leftArrow) {
      leftArrow.addEventListener('click', function() {
        slideVendor('left');
      });
      leftArrow.removeAttribute('onclick'); // Remove inline handler
    }
    
    if (rightArrow) {
      rightArrow.addEventListener('click', function() {
        slideVendor('right');
      });
      rightArrow.removeAttribute('onclick'); // Remove inline handler
    }
    
    function slideVendor(direction) {
      slideDirection = direction; // Set the direction for the transition
      if (direction === 'right') {
        currentIndex = (currentIndex - 1 + slides.length) % slides.length;
      } else if (direction === 'left') {
        currentIndex = (currentIndex + 1) % slides.length;
      }
      
      updateSlides();
      updateBullets();
    }
    
    function updateSlides() {
      slides.forEach((slide, index) => {
        const isDesktop = window.innerWidth >= 768;
        
        if (index === currentIndex) {
          // Show current slide
          slide.style.display = isDesktop ? 'grid' : 'flex';
          slide.style.position = 'absolute';
          slide.style.top = '0';
          slide.style.left = '0';
          slide.style.width = '100%';
          slide.style.opacity = '0';
          
          // Set initial position based on direction
          if (slideDirection === 'right') {
            slide.style.transform = 'translateX(100%)'; // Slide in from right
          } else {
            slide.style.transform = 'translateX(-100%)'; // Slide in from left
          }
          
          // Force reflow to ensure transition works
          slide.offsetHeight;
          
          slide.style.opacity = '1';
          slide.style.transform = 'translateX(0)';
        } else {
          // Hide other slides
          slide.style.opacity = '0';
          slide.style.position = 'absolute';
          slide.style.top = '0';
          slide.style.left = '0';
          slide.style.width = '100%';
          
          // Set exit position based on direction
          if (slideDirection === 'right') {
            slide.style.transform = 'translateX(-100%)'; // Slide out to left
          } else {
            slide.style.transform = 'translateX(100%)'; // Slide out to right
          }
          
          // Hide after transition
          setTimeout(() => {
            if (slide.style.opacity === '0') {
              slide.style.display = 'none';
            }
          }, 500);
        }
      });
    }
    
    function updateBullets() {
      bullets.forEach((bullet, index) => {
        // Update active bullet
        bullet.style.opacity = index === currentIndex ? '1' : '0.4';
        bullet.style.backgroundColor = index === currentIndex ? 'rgba(28, 32, 29, 1)' : 'rgba(154, 156, 170, 1);';
      });
    }
    
    // Keep the original function for backwards compatibility
    window.slideVendor = slideVendor;

    function goToVendorPageHP(vendorName) {
        window.location.href = "{{ section.settings.collection.url }}/pages/vendor-" + vendorName.replaceAll(' ', '-');
    }

</script>



