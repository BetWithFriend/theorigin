{{ 'horizontal-bubbles.css' | asset_url | stylesheet_tag }}
{% comment %} <p class="product-count-main-store">מספר מוצרים: {{ collection.products_count }}</p> {% endcomment %}
<div class="horizontal-bubbles-wrapper" id="horizontal-bubbles-wrapper">
    <div class="horizontal-bubbles-container">

        {% comment %} <div class="bubble-item filter-all" onclick="goToCollections('חנות-קפה')">
            <div class="bubble-text">
                <div class="bubble-title">הצג הכל</div>
                <div class="bubble-subtitle">כל הפולים</div>
            </div>
        </div>     {% endcomment %}

        <div class="bubble-item" onclick="goToFilter(this, 'filter.p.m.custom.coffee_taste', 'Chocolate')">
            <div class="bubble-text">
                <div class="bubble-title">שוקולדי</div>
                <div class="bubble-subtitle">טעם של אזור</div>
            </div>
        </div>

        <div class="bubble-item" onclick="goToFilter(this, 'filter.p.m.custom.coffee_taste', 'Sweet-Chocolate')">
            <div class="bubble-text">
                <div class="bubble-title">מתוק שוקולדי</div>
                <div class="bubble-subtitle">טעמים מיוחדים</div>
            </div>
        </div>

        <div class="bubble-item" onclick="goToFilter(this, 'filter.p.m.custom.coffee_taste', 'Sweet')">
            <div class="bubble-text">
                <div class="bubble-title">מתוק מאוזן</div>
                <div class="bubble-subtitle">קליל ופירותי</div>
            </div>
        </div>

        <div class="bubble-item" onclick="goToFilter(this, 'filter.p.m.custom.coffee_taste', 'Fruity-Sweet')">
            <div class="bubble-text">
                <div class="bubble-title">פירותי מתוק</div>
                <div class="bubble-subtitle">מתקתק ועשיר</div>
            </div>
        </div>

        <div class="bubble-item" onclick="goToFilter(this, 'filter.p.m.custom.coffee_taste', 'Fruity')">
            <div class="bubble-text">
                <div class="bubble-title">פירותי</div>
                <div class="bubble-subtitle">שוקולדי ועמוק</div>
            </div>
        </div>
    </div>
</div>
<script>

function goToFilter(element, filterKey, filterValue) {
  if (window.FacetFiltersForm && typeof FacetFiltersForm.renderPage === 'function') {

    analytics.trackClick('Filter select', {
        'Source': 'Catalogue',
        'Filter Name': filterValue
    });
     element.classList.toggle('active'); 

    const params = new URLSearchParams(window.location.search);

    let currentValues = params.getAll(filterKey);
    
    const index = currentValues.indexOf(filterValue);

    if (index > -1) {
      currentValues.splice(index, 1);
    } else {
      currentValues.push(filterValue);
    }
    params.delete(filterKey);

    currentValues.forEach(value => {
        // This adds the parameter multiple times: ?key=val1&key=val2
        params.append(filterKey, value); 
    });

    // 5. Build the new full query string (excluding the leading '?')
    const newQueryString = params.toString();

    // 6. Render the page
    // Shopify's FacetFiltersForm.renderPage is often designed to work with 
    // a parameter string or form data that represents the new state.
    // Since we've built the complete new query string, we need to ensure the 
    // renderPage function accepts a query string format, which it typically does.
    
    // The format expected by renderPage is usually 'key=value&key=value'.
    FacetFiltersForm.renderPage(newQueryString, null, true);

    // 7. Dispatch the custom event
    const event = new CustomEvent('collectionPageUpdated');
    window.dispatchEvent(event);

  } else {
    console.log('filter failed: FacetFiltersForm not found or renderPage is not a function');
  }
}

    function goToCollections(collectionName) {
        analytics.trackClick('Filter select', {
            'Source': 'Catalogue',
            'Filter Name': collectionName
        });

        window.location.href = "{{ section.settings.collection.url }}/collections/" + collectionName;
    }

    // Function to highlight active bubble and scroll into view
    function highlightActiveBubble() {
        // Get current URL path
        const currentPath = window.location.pathname;
        
        // Extract collection name from URL
        const collectionMatch = currentPath.match(/\/collections\/([^\/\?]+)/);
        if (!collectionMatch) return;
        
        const currentCollection = collectionMatch[1];
        
        // Map collection names to filter classes
        // Support both plain and url-encoded collection names
        const collectionToFilter = {
            'קפה-חד-זני': 'filter-single-origin',
            'תערובות-קפה': 'filter-blends',
            'פולי-קפה-מיוחדים': 'filter-special-beans',
            'קפה-קלייה-בהירה': 'filter-light-roast',
            'פולי-קפה-קלייה-בהירה': 'filter-light-roast',
            'פולי-קפה-קלייה-בינונית': 'filter-medium-roast',
            'פולי-קפה-קלייה-כהה': 'filter-dark-roast',
            // url-encoded keys
            '%D7%A7%D7%A4%D7%94-%D7%97%D7%93-%D7%96%D7%A0%D7%99': 'filter-single-origin',
            '%D7%AA%D7%A2%D7%A8%D7%95%D7%91%D7%95%D7%AA-%D7%A7%D7%A4%D7%94': 'filter-blends',
            '%D7%A4%D7%95%D7%9C%D7%99-%D7%A7%D7%A4%D7%94-%D7%9E%D7%99%D7%95%D7%97%D7%93%D7%99%D7%9D': 'filter-special-beans',
            '%D7%A7%D7%A4%D7%94-%D7%A7%D7%9C%D7%99%D7%99%D7%94-%D7%91%D7%94%D7%99%D7%A8%D7%94': 'filter-light-roast',
            '%D7%A4%D7%95%D7%9C%D7%99-%D7%A7%D7%A4%D7%94-%D7%A7%D7%9C%D7%99%D7%99%D7%94-%D7%91%D7%94%D7%99%D7%A8%D7%94': 'filter-light-roast',
            '%D7%A4%D7%95%D7%9C%D7%99-%D7%A7%D7%A4%D7%94-%D7%A7%D7%9C%D7%99%D7%99%D7%94-%D7%91%D7%99%D7%A0%D7%95%D7%A0%D7%99%D7%AA': 'filter-medium-roast',
            '%D7%A4%D7%95%D7%9C%D7%99-%D7%A7%D7%A4%D7%94-%D7%A7%D7%9C%D7%99%D7%99%D7%94-%D7%9B%D7%94%D7%94': 'filter-dark-roast'
        };
        
        // Find the corresponding bubble
        const filterClass = collectionToFilter[currentCollection] || 'filter-all';

        const activeBubble = document.querySelector(`.bubble-item.${filterClass}`);
        if (activeBubble) {
            // Remove active class from all bubbles
            document.querySelectorAll('.bubble-item').forEach(bubble => {
                bubble.classList.remove('active');
            });
            
            // Add active class to current bubble
            activeBubble.classList.add('active');
            
            // if (!window.location.search.includes('from=main-cta')) {
            //     // Scroll the active bubble into view
            //     activeBubble.scrollIntoView({
            //         behavior: 'smooth',
            //         block: 'nearest',
            //         inline: 'center'
            //     });
            // }
        }
    }

</script>