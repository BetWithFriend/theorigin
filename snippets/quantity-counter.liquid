{% comment %}
Quantity Counter Snippet
Usage: {% render 'quantity-counter', product: product, field_id: 'quantity' %}
{% endcomment %}

<div class="quantity-counter" data-quantity-counter>
  <button
    type="button"
    class="quantity-counter__button quantity-counter__decrease"
    data-quantity-decrease
    aria-label="Decrease quantity">
  &minus;
  </button>

  <span class="quantity-counter__value" data-quantity-value>1</span>

  <input
    type="hidden"
    name="{{ field_id | default: 'quantity' }}"
    value="1"
    data-quantity-input
    min="1"
    max="{{ product.quantity_price_breaks_configured | default: 10 }}"
  >

  <button
    type="button"
    class="quantity-counter__button quantity-counter__increase"
    data-quantity-increase
    aria-label="Increase quantity">
    &plus;
  </button>
</div>



<style>
  .quantity-counter {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: space-between;
    font-family: 'Noto Sans', sans-serif;
    font-size: 16px;
    line-height: 22px;
    font-weight: 700;
    padding: 8px 16px;
    /* background-color: #E3E0DA; */
    border: 1px solid #33363480;
    border-radius: 16px;
    /* width: 100px; */
    height: 46px;
    background-color: #FAFCFE;
  }

  .quantity-counter__button {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0;
    font-size: 20px;
    line-height: 1;
    color: #303030;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 24px;
    height: 24px;
    transition: opacity 0.2s ease;
  }

  .quantity-counter__button:hover {
    opacity: 0.7;
  }

  .quantity-counter__button:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .quantity-counter__value {
    min-width: 24px;
    text-align: center;
  }

  /* Toast Styles */
  .quantity-toast {
    position: fixed;
    /* bottom: 120px; */
    /* right: 40px; */
    /* transform: translateX(-50%); */
    padding: 12px;
    z-index: 10002;
    transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
    display: none;
    max-width: 90%;
    width: auto;
  }

  .quantity-toast.show {
    /* transform: translateX(-50%) translateY(0); */
    display: block;
    opacity: 1;
  }

  .quantity-toast__content {
    background-color: #000000;
    color: white;
    padding: 8px 24px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    gap: 8px;
    font-family: 'Noto Sans', sans-serif;
    font-size: 14px;
    font-weight: 400;
    line-height: 25px;
  }

  .quantity-toast__icon {
    font-size: 16px;
  }

  .quantity-toast__message {
  flex: 1;
  }

/* Mobile positioning */
@media (max-width: 749px) {
  .quantity-toast {
    bottom: 100px;
    left: 20px;
    right: 20px;
    transform: translateX(0);
    max-width: none;
  }
  .quantity-toast.show {
    transform: translateX(0) translateY(0);
  }
}

/* Desktop positioning - handled by JavaScript */
@media (min-width: 750px) {
  .quantity-toast {
    position: absolute;
    z-index: 10002;
    max-width: 500px;
    width: auto;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
const quantityCounters = document.querySelectorAll('[data-quantity-counter]');

// Toast functionality
function showToast(message = "לא ניתן להזמין פחות מ-2 חבילות על מנת לשמור על טריות המשלוח ועלות נמוכה") {
  const toast = document.querySelector('[data-quantity-toast]');
  const messageElement = toast.querySelector('.quantity-toast__message');

  messageElement.textContent = message;
  
  // Position toast based on screen size
  if (window.innerWidth >= 750) {
    // Desktop: position above product-dropdowns-form-wrapper
    const productDropdownsWrapper = document.querySelector('#product-dropdowns-form-wrapper');
    if (productDropdownsWrapper) {
      const rect = productDropdownsWrapper.getBoundingClientRect();
      toast.style.position = 'fixed';
      toast.style.top = (rect.top - 60) + 'px';
      // toast.style.right = '40px';
      // toast.style.transform = 'translateX(-50%)';
      toast.style.bottom = 'auto';
    }
  } else {
    // Mobile: use default positioning (already set in CSS)
    toast.style.position = 'fixed';
    toast.style.bottom = '100px';
    toast.style.left = '20px';
    toast.style.right = '20px';
    toast.style.top = 'auto';
    toast.style.transform = 'translateX(0)';
  }
  
  toast.classList.add('show');



  // Hide after 5 seconds
  setTimeout(() => {
    toast.classList.remove('show');
  }, 10000);
}

// Handle window resize to reposition toast
window.addEventListener('resize', () => {
  const toast = document.querySelector('[data-quantity-toast]');
  if (toast && toast.classList.contains('show')) {
    // Reposition the toast when window is resized
    const message = toast.querySelector('.quantity-toast__message').textContent;
    showToast(message);
  }
});

  quantityCounters.forEach(counter => {
  const decreaseBtn = counter.querySelector('[data-quantity-decrease]');
  const increaseBtn = counter.querySelector('[data-quantity-increase]');
  const valueDisplay = counter.querySelector('[data-quantity-value]');
  const input = counter.querySelector('[data-quantity-input]');

  const min = parseInt(input.getAttribute('min') || 1);
  const max = parseInt(input.getAttribute('max') || 10);
  const effectiveMin = 2; // Our custom minimum quantity

// Update display and form values
function updateValue(newValue) {
// Ensure value is within bounds
newValue = Math.max(min, Math.min(max, newValue));

// Update displayed value
valueDisplay.textContent = newValue;

// Update hidden input
input.value = newValue;

// Dispatch change event for any listeners (like cart forms)
const event = new Event('change', { bubbles: true });
input.dispatchEvent(event);

// Update button states - decrease button is never disabled but we handle the logic in click handler
increaseBtn.disabled = newValue >= max;
}

// Initialize
updateValue(parseInt(input.value));

// Set up event listeners
decreaseBtn.addEventListener('click', () => {
  const currentValue = parseInt(valueDisplay.textContent);
  const newValue = currentValue - 1;

  analytics.trackClick('PDP Quantity Decrease', {
    'Quantity': newValue
  })

  // If trying to go below our effective minimum, show toast and prevent
  // if (newValue < effectiveMin) {
  //   showToast("לא ניתן להזמין פחות מ-2 חבילות על מנת לשמור על טריות המשלוח ועלות נמוכה");
  //   return;
  // }

  updateValue(newValue);
});

increaseBtn.addEventListener('click', () => {
  const newValue = parseInt(valueDisplay.textContent) + 1;
  analytics.trackClick('PDP Quantity Increase', {
    'Quantity': newValue
  })
  updateValue(newValue);
});
});
});
</script>